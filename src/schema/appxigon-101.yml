# SCHEMA README:
# - use singular form for map container, where order doesn't matter
# - use plural form for array container, where order matters
config:
  default: axg-101

axg-101: # arbitary app-id
  config: #app/keyword. app configuration
    title: Appxigon 101 Talk Slides
    version: 0.1.0
    vars: # arbitary app wide variables container
    data: # keyword. Defineds shared data sources
    class: # keyword. Default CSS class names for components
      appxigon: container
      view:
      group:
      item:
    default: slide-cover #view/keyword. default view-id
    layout: #views/attribute. ordered views as top level template
      - header
      - _main #special keyword. Placeholder of the dynamic view
      - footer
    signal: #keyword/app. app level signal handling
      Enter: # standard DOM key name
        uri: .nextView
        params:
          step: 1
          views:
            - slide-cover
            - slide-speakers
            - slide-current-project
            - slide-intro
            - slide-todays-topic
            - technical-frameworks
            - inventors-paradox
            - gif-slide
            - slide-one-column
            - slide-abstraction-one
            - slide-abstraction-two
            - care-about-learning
            - what-does-software-do
            - values-of-business-software
            - questions-to-ask-ourselves
            - application-ui
            - building-abstractions
            - component-based-ui-one
            - component-based-ui
            - powerful-abstraction
            - nested-structure
            - flattened-structure
            - proposed-application
            - cheap-talk
            - cheap-code
            - current-implementation
            - advantages
            - tech-benefits
            - lessons-learned
            - slide-questions
      ArrowRight: # standard DOM key name
        uri: .nextView
        params:
          step: 1
          views:
            - slide-cover
            - slide-speakers
            - slide-current-project
            - slide-intro
            - slide-todays-topic
            - technical-frameworks
            - inventors-paradox
            - gif-slide
            - slide-one-column
            - slide-abstraction-one
            - slide-abstraction-two
            - care-about-learning
            - what-does-software-do
            - values-of-business-software
            - questions-to-ask-ourselves
            - application-ui
            - building-abstractions
            - component-based-ui-one
            - component-based-ui
            - powerful-abstraction
            - nested-structure
            - flattened-structure
            - proposed-application
            - cheap-talk
            - cheap-code
            - current-implementation
            - advantages
            - tech-benefits
            - lessons-learned
            - slide-questions
      ArrowLeft:
        uri: .nextView
        params:
          step: -1
          views:
            - slide-cover
            - slide-speakers
            - slide-current-project
            - slide-intro
            - slide-todays-topic
            - technical-frameworks
            - inventors-paradox
            - gif-slide
            - slide-one-column
            - slide-abstraction-one
            - slide-abstraction-two
            - care-about-learning
            - what-does-software-do
            - values-of-business-software
            - questions-to-ask-ourselves
            - application-ui
            - building-abstractions
            - component-based-ui-one
            - component-based-ui
            - powerful-abstraction
            - nested-structure
            - flattened-structure
            - proposed-application
            - cheap-talk
            - cheap-code
            - current-implementation
            - advantages
            - tech-benefits
            - lessons-learned
            - slide-questions
      q:
        uri: .showModal
        params:
          view: axg-101/qr-code-link
      Q: q
    view: # configurations applicable to all views
      actions:
        - call:
            uri: .transitClass
            params:
              name: animate-in
              timeout: 1000 # ms
        - call:
            uri: .updateSlideProgress
            params:
              id: footer.default.slider
              views:
                - slide-cover
                - slide-speakers
                - slide-current-project
                - slide-intro
                - slide-todays-topic
                - technical-frameworks
                - inventors-paradox
                - gif-slide
                - slide-one-column
                - slide-abstraction-one
                - slide-abstraction-two
                - care-about-learning
                - what-does-software-do
                - values-of-business-software
                - questions-to-ask-ourselves
                - application-ui
                - building-abstractions
                - component-based-ui-one
                - component-based-ui
                - powerful-abstraction
                - flattened-structure
                - proposed-application
                - cheap-talk
                - cheap-code
                - current-implementation
                - advantages
                - tech-benefits
                - lessons-learned
                - slide-questions
  slide-cover: # view-id (arbitary)
    config: #view/config
      title: #view/config/attribute. Defaults to "Slide Cover" (from id)
      layout: [ main, speakers ]
    main: # arbitary group-id
      - logo:
          type: display
          value: div
          class: logo
      - content: #appxigon item-id
          type: display #appxigon item-type/sub-type
          content: |
            Less is more
            ============
            Beyond Technical Frameworks
  slide-speakers:
    config: #view/config
      layout: [ main, footnote ]
    main: # arbitary group-id
      - content: #appxigon item-id
          type: display #appxigon item-type/sub-type
          content: |
            Who are we?
            ============
      - speakers:
          class: speakers-list
          type: select/list
          data:
            default:
              - value: roger
                text:  Roger LAM
              - value: siegfried
                text:  Siegfried GRIMBEEK
  slide-current-project:
    config: #view/config
      layout: [ main, sidepic ]
      class: two-column right-image
    main: # arbitary group-id
      - content: #appxigon item-id
          type: display #appxigon item-type/sub-type
          content: |
            Our current project:
            ============
            Disruptive SaaS Business Information System
            ----------
              * Based on REA business theory
              * DMS

            Cool Tech Stack
            ----------
              * Clojure (Server)
              * ClojureScript (Client)
              * Datomic (Database)

            We are hiring!
            ----------
              * Are you a dynamic self starter?
              * Join us now!
    sidepic: # arbitary group-id
      - content:
          type: display
          value: div
  slide-intro:
    config: #view/config
      layout: [ main, sidepic ]
      class: two-column right-image
    main: # arbitary group-id
      - content: #appxigon item-id
          type: display #appxigon item-type/sub-type
          content: |
            Tonight’s Context
            ============
              * General business application
              * Front end / UI
              * But … the big ideas are universal

            Coverage
            ============
              * Paradoxes, principles & ideas
              * Demo
              * Technical implementation detail
              * Relax and some fun

    sidepic: # arbitary group-id
      - content:
          type: display
          value: div
  slide-todays-topic:
    config: #view/config
      layout: [ header, left, right, footer ]
      class: two-column just-info
    header: # arbitary group-idclass: header
      - config:
          class: header
      - content: #appxigon item-id
          type: display #appxigon item-type/sub-type
          content: |
            Less Is More: Beyond Technical Frameworks
            ============
    left: # arbitary group-id
      - config:
          class: column left-column
      - content:
          type: display
          content: |
            Less
            ============
              * Boilerplate, Code wiring, Spaghetti code
              * Works that machine can do better than us
              * Manual work
              * Incidental complexity
    right: # arbitary group-id
      - config:
          class: column right-column
      - content:
          type: display
          content: |
            More
            ============
              * Business value
              * Declarative work (Let the machines be our slave)
              * Time (to think)

    footer: # arbitary group-idclass: header
      - config:
          class: footer
      - content: #appxigon item-id
          type: display #appxigon item-type/sub-type
          content: |
            Beyond: We are destined to go higher level
            ============
  technical-frameworks:
    config: #view/config
      layout: [ sidepic, main ]
      class: two-column left-image
    sidepic: # arbitary group-id
      - content:
          type: display
          value: div
    main: # arbitary group-id
      - content: #appxigon item-id
          type: display #appxigon item-type/sub-type
          content: |
            Technical Frameworks:
            ============
              * Technical VS Business Application / Problem Domain
              * Framework: FRAMED to Work in certain way
              * No matter which framework / library you work, your logic is always wired in source codes, so tightly!

  inventors-paradox:
    config: #view/config
      layout: [ quote ]
      class: quote-content
    quote: # arbitary group-id
      - content: #appxigon item-id
          type: display #appxigon item-type/sub-type
          content: |
            The **inventor's paradox** is a phenomenon that occurs in seeking a solution to a given problem. Instead of solving a specific type of problem, which would seem intuitively easier, it can be easier to solve a more general problem, which covers the specifics of the sought-after solution.
  gif-slide:
    config: #view/config
      layout: [ gif ]
      class: gif-content
    gif: # arbitary group-id
      - content: #appxigon item-id
          type: display #appxigon item-type/sub-type
          content: |
            How do we learn?
            ==============
  slide-one-column:
    config: #view/config
      layout: [ header, full-column, footer ]
      class: full-column just-info
    header: # arbitary group-idclass: header
      - config:
          class: header
      - content: #appxigon item-id
          type: display #appxigon item-type/sub-type
          content: |
            How do we learn
            ============
    full-column: # arbitary group-id
      - config:
          class: column
      - content:
          type: display
          content: |
              * The mind takes a long time to sort out unfamiliar complex details
              * But we are able to handle them much faster at higher level
              * We use guiding principles in the form of mnemonics, tricks and formulas to reduce the complexity

              Examples of learning:
              ============
                * Painting (Structure by simple shapes, perspective)
                * Martial Art (Coordinate the body under pressure)
                * Accounting (DEAD CLIC)
  slide-abstraction-one:
    config: #view/config
      layout: [ full-column, sidepic ]
      class: two-column right-image
    full-column: # arbitary group-id
      - config:
          class: column
      - content:
          type: display
          content: |
              Examples of Abstraction Levels
              ============
              Problem: Travel from point A to B
              ----------
                * Walk
                * Run
                * Bike
                * Motor Bike
                * Car
                * Car with driver
                * Train
                * Reducing away the problem: Do you really need to travel?
    sidepic: # arbitary group-id
      - content:
          type: display
          value: div
  slide-abstraction-two:
    config: #view/config
      layout: [ header, left, right, footer ]
      class: two-column just-info
    header: # arbitary group-idclass: header
      - config:
          class: header
      - content: #appxigon item-id
          type: display #appxigon item-type/sub-type
          content: |
            Examples of Abstraction Levels Continued
            ============
    left: # arbitary group-id
      - config:
          class: column left-column
      - content:
          type: display
          content: |
            Database Types
            ============
              * RDBMS
                * Tables, joins, ORMs
              * NOSQL DB
                * freedom to create
                * but hard to escape from created structure
                * Can you escape from ORMs?

    right: # arbitary group-id
      - config:
          class: column right-column
      - content:
          type: display
          content: |
            ...
            ============
              * Graph Database
                * Good for representing relationships
                * What about data that’s not good to represent in nodes and edges?
              * Multi-Model DB
                * data are still bound to different models
    footer: # arbitary group-idclass: header
      - config:
          class: footer
      - content: #appxigon item-id
          type: display #appxigon item-type/sub-type
          content: |
            Does an universal DB exist? Take a look at Datomic
            ===========
  care-about-learning:
    config: #view/config
      layout: [ header, full-column, footer ]
      class: full-column just-info
    header: # arbitary group-idclass: header
      - config:
          class: header
      - content: #appxigon item-id
          type: display #appxigon item-type/sub-type
          content: |
            Why do we care about learning?
            ============
    full-column: # arbitary group-id
      - config:
          class: column
      - content:
          type: display
          content: |
            * Software Development is a learning process
              * Problem domains
              * Technical solutions
            * Most of the biggest problems in software are problems of misconception
            * Software Developer’s Life Cycle
              * Waves of technical frameworks
              * Repeating the same business value in different frameworks
              * Most got lost on why learning forever
              * Until exit from technical role
  what-does-software-do:
    config: #view/config
      layout: [ full-column, sidepic ]
      class: two-column right-image
    full-column: # arbitary group-id
      - config:
          class: column
      - content:
          type: display
          content: |
            What does software application do?
            ============
              * Everything is data
              * Managing data flow
    sidepic: # arbitary group-id
      - content:
          type: display
          value: div
  values-of-business-software:
    config: #view/config
      layout: [ full-column, sidepic ]
      class: two-column right-image
    full-column: # arbitary group-id
      - config:
          class: column
      - content:
          type: display
          content: |
            What are the values of applications?
            ============
              * Handle business and aesthetic requirements
              * E.g. How fast can we:
                * Build AB testing
                * Building new features and functions
    sidepic: # arbitary group-id
      - content:
          type: display
          value: div

  questions-to-ask-ourselves:
    config: #view/config
      layout: [ full-column, sidepic ]
      class: two-column right-image
    full-column: # arbitary group-id
      - config:
          class: column
      - content:
          type: display
          content: |
            Some questions to ask ourselves
            ============
              * What degree of freedom can the software architecture provide to the business?
              * Do we really need an army of developers, to work on technical details?
              * Should there be a role like application builder?
              * Should developers be proud of being able to handling complexity over and over again?
    sidepic: # arbitary group-id
      - content:
          type: display
          value: div

  application-ui:
    config: #view/config
      layout: [ full-column, sidepic ]
      class: two-column right-image
    full-column: # arbitary group-id
      - config:
          class: column
      - content:
          type: display
          content: |
            What’s Application UI
            ============
              * UI is the communication of intents between the user(s) and the application worldview presented by application designer
              * Capture user intentions
    sidepic: # arbitary group-id
      - content:
          type: display
          value: div
  building-abstractions:
    config: #view/config
      layout: [ full-column, sidepic ]
      class: two-column right-image
    full-column: # arbitary group-id
      - config:
          class: column
      - content:
          type: display
          content: |
            Different UI building abstractions
            ============
              * UI primitives
              * MVC
              * MVVM
              * Latest component based
                * React, Angular, Vue, Ember, Elm etc...
    sidepic: # arbitary group-id
      - content:
          type: display
          value: div
  component-based-ui-one:
    config: #view/config
      layout: [ header, full-column ]
      class: full-column
    header: # arbitary group-idclass: header
      - config:
          class: header
      - content: #appxigon item-id
          type: display #appxigon item-type/sub-type
          content: |
            Component Based UI
            ============
    full-column: # arbitary group-id
      - config:
          class: column
      - content:
          type: display
          content: div

  component-based-ui:
    config: #view/config
      layout: [ full-column, sidepic ]
      class: two-column right-image
    full-column: # arbitary group-id
      - config:
          class: column
      - content:
          type: display
          content: |
            Component Based UI
            ============
              * The way to build
              * The issues
              * Solutions?
    sidepic: # arbitary group-id
      - content:
          type: display
          value: div
  powerful-abstraction:
    config: #view/config
      layout: [ full-column, sidepic ]
      class: two-column right-image
    full-column: # arbitary group-id
      - config:
          class: column
      - content:
          type: display
          content: |
            Is there a more powerful abstraction?
            ============
              * Domain Specific Language (DSL) over technical plumbing
              * Declarative VS Logical
              * Functional VS Component
              * Focus on the problem domain, with much less irrelavant technical details
              * Decouple biz logic from code
    sidepic: # arbitary group-id
      - content:
          type: display
          value: div
  nested-structure:
    config: #view/config
      layout: [ header, full-column ]
      class: full-column
    header: # arbitary group-idclass: header
      - config:
          class: header
      - content: #appxigon item-id
          type: display #appxigon item-type/sub-type
          content: |
            Nested structure
            ============
    full-column: # arbitary group-id
      - config:
          class: column
      - content:
          type: display
          content: div
  flattened-structure:
    config: #view/config
      layout: [ header, full-column ]
      class: full-column
    header: # arbitary group-idclass: header
      - config:
          class: header
      - content: #appxigon item-id
          type: display #appxigon item-type/sub-type
          content: |
            A flattened / normalized / structure
            ============
    full-column: # arbitary group-id
      - config:
          class: column
      - content:
          type: display
          content: div
  proposed-application:
    config: #view/config
      layout: [ full-column, sidepic ]
      class: two-column right-image
    full-column: # arbitary group-id
      - config:
          class: column
      - content:
          type: display
          content: |
            The Proposed Application DSL
            ============
              * App
              * View
                * Focused intent
              * Group
                * Unit of concern
              * Item (Atomic concepts)
                * Display
                * Select
                * Input
                * Action
                * Custom Item
              * Custom Functions
    sidepic: # arbitary group-id
      - content:
          type: display
          value: div
  cheap-talk:
    config: #view/config
      layout: [ header, full-column, footer ]
      class: full-column just-info
    header: # arbitary group-idclass: header
      - config:
          class: header
      - content: #appxigon item-id
          type: display #appxigon item-type/sub-type
          content: |
            Talk is cheap. Let’s see the code
            =================
  cheap-code:
    config: #view/config
      layout: [ header, full-column, footer ]
      class: full-column just-info
    header: # arbitary group-idclass: header
      - config:
          class: header
      - content: #appxigon item-id
          type: display #appxigon item-type/sub-type
          content: |
            Code is cheap. Let’s see the demo
            =================
  current-implementation:
    config: #view/config
      layout: [ full-column, sidepic ]
      class: two-column right-image
    full-column: # arbitary group-id
      - config:
          class: column
      - content:
          type: display
          content: |
            Current Implementation Tech stack
            =================
              * Livescript
              * React API
              * Redux
    sidepic: # arbitary group-id
      - content:
          type: display
          value: div
  advantages:
    config: #view/config
      layout: [ full-column, sidepic ]
      class: two-column right-image
    full-column: # arbitary group-id
      - config:
          class: column
      - content:
          type: display
          content: |
            Advantages
            =================
              * App developers deliver direct business value
              * By focusing on presentation/dumb components and styling
              * Digestible App definition schema
              * 10x less boilerplate/setup
              * App UI schema is dynamic
    sidepic: # arbitary group-id
      - content:
          type: display
          value: div
  tech-benefits:
    config: #view/config
      layout: [ full-column, sidepic ]
      class: two-column right-image
    full-column: # arbitary group-id
      - config:
          class: column
      - content:
          type: display
          content: |
            Incidental Technical Benefits
            =================
              * Redux is automated away
              * Clean and flat state structure
              * Full flexibility with custom components and custom functions
              * Apollo experience: change single UI to multiple UI
    sidepic: # arbitary group-id
      - content:
          type: display
          value: div
  lessons-learned:
    config: #view/config
      layout: [ full-column, sidepic ]
      class: two-column right-image
    full-column: # arbitary group-id
      - config:
          class: column
      - content:
          type: display
          content: |
            Lessons learned
            =================
              * Vision is vital
              * Flatten nested structure
              * Trust the library
              * Always doubt your own judgement
              * Be open minded
              * Avoid data mutability
              * Breaking backward compatibility is unavoidable
              * Minimum external dependency
    sidepic: # arbitary group-id
      - content:
          type: display
          value: div
  slide-questions: # view-id (arbitary)
    config: #view/config
      title: #view/config/attribute. Defaults to "Slide Cover" (from id)
      layout: [ main, speakers ]
    main: # arbitary group-id
      - content: #appxigon item-id
          type: display #appxigon item-type/sub-type
          content: |
            Any Questions?
            ============
            Feel free to ask...

  feedback: # view-id
    config: #view/config
      title: #view/config/attribute
      layout: #view/config/attribute
        - main
        - misc
    main: # arbitary group-id
      - audience-feedback-input:
          type: emoji-input # custom item-type
      - audience-feedback-display:
          type: emoji-display # custom item-type
    misc: # arbitary group-id
      - statistics :
          type: display

  qr-code-link:
    info:
      - qr-code:
          type: display/image
          value: https://chart.googleapis.com/chart?cht=qr&chl=www.goo.gl%2Fr45fMP&chs=500x500&choe=UTF-8&chld=L|2
          element:
            width: 500
            height: 500
      - message:
          type: display
          content: |
            www.goo.gl/r45fMP


  footer: # view-id 'header' specified as in view.template
    config:
      class: custom-footer-view #overwrites default class of 'view'
      layout:
        - default
    default: # Here 'default' is just an arbitary group id. items should be contained in group id
      - response-form:
          type: response-form
      - slider:
          type: appxigon-slider
