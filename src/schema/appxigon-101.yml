# SCHEMA README:
# - use singular form for map container, where order doesn't matter
# - use plural form for array container, where order matters
config:
  default: axg-101

axg-101: # arbitary app-id
  config: #app/keyword. app configuration
    title: Appxigon 101 Talk Slides
    version: 0.1.0
    vars: # arbitary app wide variables container
    data: # keyword. Defineds shared data sources
    class: # keyword. Default CSS class names for components
      appxigon: container
      view:
      group:
      item:
    default: slide-cover #view/keyword. default view-id
    layout: #views/attribute. ordered views as top level template
      - header
      - _main #special keyword. Placeholder of the dynamic view
      - footer
    signal: #keyword/app. app level signal handling
      Enter: # standard DOM key name
        uri: .nextView
        params:
          step: 1
          views:
            - slide-cover
            - slide-speakers
            - slide-current-project
            - slide-intro
            - slide-todays-topic
            - technical-frameworks
            - inventors-paradox
            - gif-slide
      ArrowRight: # standard DOM key name
        uri: .nextView
        params:
          step: 1
          views:
            - slide-cover
            - slide-speakers
            - slide-current-project
            - slide-intro
            - slide-todays-topic
            - technical-frameworks
            - inventors-paradox
            - gif-slide
      ArrowLeft:
        uri: .nextView
        params:
          step: -1
          views:
            - slide-cover
            - slide-speakers
            - slide-current-project
            - slide-intro
            - slide-todays-topic
            - technical-frameworks
            - inventors-paradox
            - gif-slide
    view: # configurations applicable to all views
          actions:
            - call:
                uri: .transitClass
                params:
                  name: animate-in
                  timeout: 1000 # ms
  slide-cover: # view-id (arbitary)
    config: #view/config
      title: #view/config/attribute. Defaults to "Slide Cover" (from id)
      layout: [ main, speakers ]
    main: # arbitary group-id
      - logo:
          type: display
          value: div
          class: logo
      - content: #appxigon item-id
          type: display #appxigon item-type/sub-type
          content: |
            Less is more
            ============
            Beyond Technical Frameworks
  slide-speakers:
    config: #view/config
      layout: [ main, footnote ]
    main: # arbitary group-id
      - content: #appxigon item-id
          type: display #appxigon item-type/sub-type
          content: |
            Who are we?
            ============
      - speakers:
          class: speakers-list
          type: select/list
          data:
            default:
              - value: roger
                text:  Roger LAM
              - value: siegfried
                text:  Siegfried GRIMBEEK
  slide-current-project:
    config: #view/config
      layout: [ main, sidepic ]
      class: two-column right-image
    main: # arbitary group-id
      - content: #appxigon item-id
          type: display #appxigon item-type/sub-type
          content: |
            Our current project:
            ============
            Disruptive SaaS Business Information System
            ----------
              * REA (Accounting)
              * DMS

            Cool Technical Stack
            ----------
              * Clojure (server)
              * ClojureScript (client)
              * Datomic (Database)

            We are hiring!
            ----------
              * Are you a dynamic self starter?
              * Join us now!
    sidepic: # arbitary group-id
      - content:
          type: display
          value: div
  slide-intro:
    config: #view/config
      layout: [ main, sidepic ]
      class: two-column right-image
    main: # arbitary group-id
      - content: #appxigon item-id
          type: display #appxigon item-type/sub-type
          content: |
            Scope:
            ============
              * General application
              * Front end / UI

            What to expect?
            ============
              * Ideas, probably new
              * Technical implementation detail sharing and discussion
              * A bit high level principles if technical detail is too much
              * Some fun
    sidepic: # arbitary group-id
      - content:
          type: display
          value: div
  slide-todays-topic:
    config: #view/config
      layout: [ header, left, right, footer ]
      class: two-column just-info
    header: # arbitary group-idclass: header
      - config:
          class: header
      - content: #appxigon item-id
          type: display #appxigon item-type/sub-type
          content: |
            Less is more
            ============

    left: # arbitary group-id
      - config:
          class: column left-column
      - content:
          type: display
          content: |
            Less
            ============
              * Our problems today
              * Boilerplate, code wiring
              * Repetition (DRY)
              * Works that machine can do better than us
              * Technical work

    right: # arbitary group-id
      - config:
          class: column right-column
      - content:
          type: display
          content: |
            More
            ============
              * The approach we are proposing
              * Achieve more projects
              * Time to think
              * Declarative work (Let the machine fulfil our wishes)
              * Time to think about AGI

    footer: # arbitary group-idclass: header
      - config:
          class: footer
      - content: #appxigon item-id
          type: display #appxigon item-type/sub-type
          content: |
            Beyond: The whole point of doing less while achieving more
            ============
  technical-frameworks:
    config: #view/config
      layout: [ sidepic, main ]
      class: two-column left-image
    sidepic: # arbitary group-id
      - content:
          type: display
          value: div
    main: # arbitary group-id
      - content: #appxigon item-id
          type: display #appxigon item-type/sub-type
          content: |
            Technical Frameworks:
            ============
              * Technical VS Business Application / Problem Domain
              * Framework: FRAMED to Work in certain way
              * No matter which framework / library you work, your logic is always wired in source codes, so tightly!

            This talk:
            ============
            * We focus on the client side of general business applications, which is what we work on most of the time. However the big ideas are universal
            * The higher level are we, we generalize more
  inventors-paradox:
    config: #view/config
      layout: [ quote ]
      class: quote-content
    quote: # arbitary group-id
      - content: #appxigon item-id
          type: display #appxigon item-type/sub-type
          content: |
            The **inventor's paradox** is a phenomenon that occurs in seeking a solution to a given problem. Instead of solving a specific type of problem, which would seem intuitively easier, it can be easier to solve a more general problem, which covers the specifics of the sought-after solution.
  gif-slide:
    config: #view/config
      layout: [ gif ]
      class: gif-content
    gif: # arbitary group-id
      - content: #appxigon item-id
          type: display #appxigon item-type/sub-type
          content: |
            How do we learn?
            ==============

  slide-intro-less-is-more:

  slide-problem:

  slide-proposal:

  slide-future:

  slide-conclusion:

  feedback: # view-id
    config: #view/config
      title: #view/config/attribute
      layout: #view/config/attribute
        - main
        - misc
    main: # arbitary group-id
      - audience-feedback-input:
          type: emoji-input # custom item-type
      - audience-feedback-display:
          type: emoji-display # custom item-type
    misc: # arbitary group-id
      - statistics :
          type: display

  footer: # view-id 'header' specified as in view.template
    config:
      class: custom-footer-view #overwrites default class of 'view'
      layout:
        - default
    default: # Here 'default' is just an arbitary group id. items should be contained in group id
      - response-form:
          type: response-form
      - slider:
          type: appxigon-slider
