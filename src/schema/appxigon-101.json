{
  "config": {
    "default": "axg-101"
  },
  "axg-101": {
    "config": {
      "title": "Appxigon 101 Talk Slides",
      "version": "0.1.0",
      "vars": null,
      "data": null,
      "class": {
        "appxigon": "container",
        "view": null,
        "group": null,
        "item": null
      },
      "default": "slide-cover",
      "layout": [
        "header",
        "_main",
        "footer"
      ],
      "signal": {
        "Enter": {
          "uri": ".nextView",
          "params": {
            "step": 1,
            "views": [
              "slide-cover",
              "slide-speakers",
              "slide-current-project",
              "slide-intro",
              "slide-todays-topic",
              "technical-frameworks",
              "inventors-paradox",
              "gif-slide",
              "slide-one-column",
              "slide-abstraction-one",
              "slide-abstraction-two",
              "care-about-learning",
              "what-does-software-do",
              "values-of-business-software",
              "questions-to-ask-ourselves",
              "application-ui",
              "building-abstractions",
              "component-based-ui-one",
              "component-based-ui",
              "powerful-abstraction",
              "nested-structure",
              "flattened-structure",
              "proposed-application",
              "cheap-talk",
              "cheap-code",
              "current-implementation",
              "advantages",
              "tech-benefits",
              "lessons-learned",
              "slide-questions"
            ]
          }
        },
        "ArrowRight": "Enter",
        "ArrowLeft": {
          "uri": ".nextView",
          "params": {
            "step": -1,
            "views": [
              "slide-cover",
              "slide-speakers",
              "slide-current-project",
              "slide-intro",
              "slide-todays-topic",
              "technical-frameworks",
              "inventors-paradox",
              "gif-slide",
              "slide-one-column",
              "slide-abstraction-one",
              "slide-abstraction-two",
              "care-about-learning",
              "what-does-software-do",
              "values-of-business-software",
              "questions-to-ask-ourselves",
              "application-ui",
              "building-abstractions",
              "component-based-ui-one",
              "component-based-ui",
              "powerful-abstraction",
              "nested-structure",
              "flattened-structure",
              "proposed-application",
              "cheap-talk",
              "cheap-code",
              "current-implementation",
              "advantages",
              "tech-benefits",
              "lessons-learned",
              "slide-questions"
            ]
          }
        },
        "q": {
          "uri": ".showModal",
          "params": {
            "view": "axg-101/qr-code-link"
          }
        },
        "Q": "q"
      },
      "view": {
        "actions": [
          {
            "call": {
              "uri": ".transitClass",
              "params": {
                "name": "animate-in",
                "timeout": 1000
              }
            }
          },
          {
            "call": {
              "uri": ".updateSlideProgress",
              "params": {
                "id": "footer.default.slider",
                "views": [
                  "slide-cover",
                  "slide-speakers",
                  "slide-current-project",
                  "slide-intro",
                  "slide-todays-topic",
                  "technical-frameworks",
                  "inventors-paradox",
                  "gif-slide",
                  "slide-one-column",
                  "slide-abstraction-one",
                  "slide-abstraction-two",
                  "care-about-learning",
                  "what-does-software-do",
                  "values-of-business-software",
                  "questions-to-ask-ourselves",
                  "application-ui",
                  "building-abstractions",
                  "component-based-ui-one",
                  "component-based-ui",
                  "powerful-abstraction",
                  "flattened-structure",
                  "proposed-application",
                  "cheap-talk",
                  "cheap-code",
                  "current-implementation",
                  "advantages",
                  "tech-benefits",
                  "lessons-learned",
                  "slide-questions"
                ]
              }
            }
          }
        ]
      }
    },
    "slide-cover": {
      "config": {
        "title": null,
        "layout": [
          "main",
          "instructions"
        ]
      },
      "main": [
        {
          "logo": {
            "type": "display",
            "value": "div",
            "class": "logo"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "Less is more\n============\nBeyond Technical Frameworks\n"
          }
        }
      ],
      "instructions": [
        {
          "content": {
            "class": "instructions",
            "type": "display",
            "content": "Instructions\n============\n  1. Press the `Q` button to launch the QR code.\n  2. Scan the QR code to launch the Emoji App.\n  3. Use `Enter` / `ArrowRight`: Next Slide and  `ArrowLeft`: Previous Slide\n"
          }
        }
      ]
    },
    "slide-speakers": {
      "config": {
        "layout": [
          "header",
          "left",
          "right",
          "footer"
        ],
        "class": "two-column just-info"
      },
      "header": [
        {
          "config": {
            "class": "header"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "Who are we?\n============\n"
          }
        }
      ],
      "left": [
        {
          "config": {
            "class": "column left-column"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "Roger LAM\n============\nRoger believes the best work-life balance is to unify everything, then the mind is able to flow and figure out the best solution for a problem. By deep-diving into basic theories of a domain and paying attention to subtleties, Roger enjoys being able to create simple and effective technical solutions.\n\n[Github](https://github.com/rlhk) - [https://github.com/rlhk](https://github.com/rlhk)\n\n[LinkedIn](https://www.linkedin.com/in/xrlhk/) - [https://www.linkedin.com/in/xrlhk/](https://www.linkedin.com/in/xrlhk/)\n"
          }
        }
      ],
      "right": [
        {
          "config": {
            "class": "column right-column"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "Siegfried GRIMBEEK\n============\nSkilled in informatics, development and all things technology related, Siegfried is an online guru. He has delivered projects and consulted across a wide array of industries including Banking, Telecommunications, startups and many more. He believes in delivering scalable, sustainable and practical solutions using modern technology and practices.\n\n[Github](https://github.com/siegfriedgrimbeek) - [https://github.com/siegfriedgrimbeek](https://github.com/siegfriedgrimbeek)\n\n[LinkedIn](https://www.linkedin.com/in/siegfriedgrimbeek/) - [https://www.linkedin.com/in/siegfriedgrimbeek/](https://www.linkedin.com/in/siegfriedgrimbeek/)\n"
          }
        }
      ]
    },
    "slide-current-project": {
      "config": {
        "layout": [
          "main",
          "sidepic"
        ],
        "class": "two-column right-image"
      },
      "main": [
        {
          "content": {
            "type": "display",
            "content": "Our current project:\n============\nDisruptive SaaS Business Information System\n----------\n  * Based on REA business theory\n  * DMS\n\nCool Tech Stack\n----------\n  * Clojure (Server)\n  * ClojureScript (Client)\n  * Datomic (Database)\n\nWe are hiring!\n----------\n  * Are you a dynamic self starter?\n  * Join us now!\n"
          }
        }
      ],
      "sidepic": [
        {
          "content": {
            "type": "display",
            "value": "div"
          }
        }
      ]
    },
    "slide-intro": {
      "config": {
        "layout": [
          "main",
          "sidepic"
        ],
        "class": "two-column right-image"
      },
      "main": [
        {
          "content": {
            "type": "display",
            "content": "Tonight’s Context\n============\n  * General business application\n  * Front end / UI\n  * But … the big ideas are universal\n\nCoverage\n============\n  * Paradoxes, principles & ideas\n  * Demo\n  * Technical implementation detail\n  * Relax and some fun\n"
          }
        }
      ],
      "sidepic": [
        {
          "content": {
            "type": "display",
            "value": "div"
          }
        }
      ]
    },
    "slide-todays-topic": {
      "config": {
        "layout": [
          "header",
          "left",
          "right",
          "footer"
        ],
        "class": "two-column just-info"
      },
      "header": [
        {
          "config": {
            "class": "header"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "Less Is More: Beyond Technical Frameworks\n============\n"
          }
        }
      ],
      "left": [
        {
          "config": {
            "class": "column left-column"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "Less\n============\n  * Boilerplate, Code wiring, Spaghetti code\n  * Works that machine can do better than us\n  * Manual work\n  * Incidental complexity\n"
          }
        }
      ],
      "right": [
        {
          "config": {
            "class": "column right-column"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "More\n============\n  * Business value\n  * Declarative work (Let the machines be our slave)\n  * Time (to think)\n"
          }
        }
      ],
      "footer": [
        {
          "config": {
            "class": "footer"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "Beyond: We are destined to go higher level\n============\n"
          }
        }
      ]
    },
    "technical-frameworks": {
      "config": {
        "layout": [
          "sidepic",
          "main"
        ],
        "class": "two-column left-image"
      },
      "sidepic": [
        {
          "content": {
            "type": "display",
            "value": "div"
          }
        }
      ],
      "main": [
        {
          "content": {
            "type": "display",
            "content": "Technical Frameworks:\n============\n  * Technical VS Business Application / Problem Domain\n  * Framework: FRAMED to Work in certain way\n  * No matter which framework / library you work, your logic is always wired in source codes, so tightly!\n"
          }
        }
      ]
    },
    "inventors-paradox": {
      "config": {
        "layout": [
          "quote"
        ],
        "class": "quote-content"
      },
      "quote": [
        {
          "content": {
            "type": "display",
            "content": "The **inventor's paradox** is a phenomenon that occurs in seeking a solution to a given problem. Instead of solving a specific type of problem, which would seem intuitively easier, it can be easier to solve a more general problem, which covers the specifics of the sought-after solution.\n"
          }
        }
      ]
    },
    "gif-slide": {
      "config": {
        "layout": [
          "gif"
        ],
        "class": "gif-content"
      },
      "gif": [
        {
          "content": {
            "type": "display",
            "content": "How do we learn?\n==============\n"
          }
        }
      ]
    },
    "slide-one-column": {
      "config": {
        "layout": [
          "header",
          "full-column",
          "footer"
        ],
        "class": "full-column just-info"
      },
      "header": [
        {
          "config": {
            "class": "header"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "How do we learn\n============\n"
          }
        }
      ],
      "full-column": [
        {
          "config": {
            "class": "column"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "* The mind takes a long time to sort out unfamiliar complex details\n* But we are able to handle them much faster at higher level\n* We use guiding principles in the form of mnemonics, tricks and formulas to reduce the complexity\n\nExamples of learning:\n============\n  * Painting (Structure by simple shapes, perspective)\n  * Martial Art (Coordinate the body under pressure)\n  * Accounting (DEAD CLIC)\n"
          }
        }
      ]
    },
    "slide-abstraction-one": {
      "config": {
        "layout": [
          "full-column",
          "sidepic"
        ],
        "class": "two-column right-image"
      },
      "full-column": [
        {
          "config": {
            "class": "column"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "Examples of Abstraction Levels\n============\nProblem: Travel from point A to B\n----------\n  * Walk\n  * Run\n  * Bike\n  * Motor Bike\n  * Car\n  * Car with driver\n  * Train\n  * Reducing away the problem: Do you really need to travel?\n"
          }
        }
      ],
      "sidepic": [
        {
          "content": {
            "type": "display",
            "value": "div"
          }
        }
      ]
    },
    "slide-abstraction-two": {
      "config": {
        "layout": [
          "header",
          "left",
          "right",
          "footer"
        ],
        "class": "two-column just-info"
      },
      "header": [
        {
          "config": {
            "class": "header"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "Examples of Abstraction Levels Continued\n============\n"
          }
        }
      ],
      "left": [
        {
          "config": {
            "class": "column left-column"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "Database Types\n============\n  * RDBMS\n    * Tables, joins, ORMs\n  * NOSQL DB\n    * freedom to create\n    * but hard to escape from created structure\n    * Can you escape from ORMs?\n"
          }
        }
      ],
      "right": [
        {
          "config": {
            "class": "column right-column"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "...\n============\n  * Graph Database\n    * Good for representing relationships\n    * What about data that’s not good to represent in nodes and edges?\n  * Multi-Model DB\n    * data are still bound to different models\n"
          }
        }
      ],
      "footer": [
        {
          "config": {
            "class": "footer"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "Does an universal DB exist? Take a look at Datomic\n===========\n"
          }
        }
      ]
    },
    "care-about-learning": {
      "config": {
        "layout": [
          "header",
          "full-column",
          "footer"
        ],
        "class": "full-column just-info"
      },
      "header": [
        {
          "config": {
            "class": "header"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "Why do we care about learning?\n============\n"
          }
        }
      ],
      "full-column": [
        {
          "config": {
            "class": "column"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "* Software Development is a learning process\n  * Problem domains\n  * Technical solutions\n* Most of the biggest problems in software are problems of misconception\n* Software Developer’s Life Cycle\n  * Waves of technical frameworks\n  * Repeating the same business value in different frameworks\n  * Most got lost on why learning forever\n  * Until exit from technical role\n"
          }
        }
      ]
    },
    "what-does-software-do": {
      "config": {
        "layout": [
          "full-column",
          "sidepic"
        ],
        "class": "two-column right-image"
      },
      "full-column": [
        {
          "config": {
            "class": "column"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "What does software application do?\n============\n  * Everything is data\n  * Managing data flow\n"
          }
        }
      ],
      "sidepic": [
        {
          "content": {
            "type": "display",
            "value": "div"
          }
        }
      ]
    },
    "values-of-business-software": {
      "config": {
        "layout": [
          "full-column",
          "sidepic"
        ],
        "class": "two-column right-image"
      },
      "full-column": [
        {
          "config": {
            "class": "column"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "What are the values of applications?\n============\n  * Handle business and aesthetic requirements\n  * E.g. How fast can we:\n    * Build AB testing\n    * Building new features and functions\n"
          }
        }
      ],
      "sidepic": [
        {
          "content": {
            "type": "display",
            "value": "div"
          }
        }
      ]
    },
    "questions-to-ask-ourselves": {
      "config": {
        "layout": [
          "full-column",
          "sidepic"
        ],
        "class": "two-column right-image"
      },
      "full-column": [
        {
          "config": {
            "class": "column"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "Some questions to ask ourselves\n============\n  * What degree of freedom can the software architecture provide to the business?\n  * Do we really need an army of developers, to work on technical details?\n  * Should there be a role like application builder?\n  * Should developers be proud of being able to handling complexity over and over again?\n"
          }
        }
      ],
      "sidepic": [
        {
          "content": {
            "type": "display",
            "value": "div"
          }
        }
      ]
    },
    "application-ui": {
      "config": {
        "layout": [
          "full-column",
          "sidepic"
        ],
        "class": "two-column right-image"
      },
      "full-column": [
        {
          "config": {
            "class": "column"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "What’s Application UI\n============\n  * UI is the communication of intents between the user(s) and the application worldview presented by application designer\n  * Capture user intentions\n"
          }
        }
      ],
      "sidepic": [
        {
          "content": {
            "type": "display",
            "value": "div"
          }
        }
      ]
    },
    "building-abstractions": {
      "config": {
        "layout": [
          "full-column",
          "sidepic"
        ],
        "class": "two-column right-image"
      },
      "full-column": [
        {
          "config": {
            "class": "column"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "Different UI building abstractions\n============\n  * UI primitives\n  * MVC\n  * MVVM\n  * Latest component based\n    * React, Angular, Vue, Ember, Elm etc...\n"
          }
        }
      ],
      "sidepic": [
        {
          "content": {
            "type": "display",
            "value": "div"
          }
        }
      ]
    },
    "component-based-ui-one": {
      "config": {
        "layout": [
          "header",
          "full-column"
        ],
        "class": "full-column"
      },
      "header": [
        {
          "config": {
            "class": "header"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "Component Based UI\n============\n"
          }
        }
      ],
      "full-column": [
        {
          "config": {
            "class": "column"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "div"
          }
        }
      ]
    },
    "component-based-ui": {
      "config": {
        "layout": [
          "full-column",
          "sidepic"
        ],
        "class": "two-column right-image"
      },
      "full-column": [
        {
          "config": {
            "class": "column"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "Component Based UI\n============\n  * The way to build\n  * The issues\n  * Solutions?\n"
          }
        }
      ],
      "sidepic": [
        {
          "content": {
            "type": "display",
            "value": "div"
          }
        }
      ]
    },
    "powerful-abstraction": {
      "config": {
        "layout": [
          "full-column",
          "sidepic"
        ],
        "class": "two-column right-image"
      },
      "full-column": [
        {
          "config": {
            "class": "column"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "Is there a more powerful abstraction?\n============\n  * Domain Specific Language (DSL) over technical plumbing\n  * Declarative VS Logical\n  * Functional VS Component\n  * Focus on the problem domain, with much less irrelavant technical details\n  * Decouple biz logic from code\n"
          }
        }
      ],
      "sidepic": [
        {
          "content": {
            "type": "display",
            "value": "div"
          }
        }
      ]
    },
    "nested-structure": {
      "config": {
        "layout": [
          "header",
          "full-column"
        ],
        "class": "full-column"
      },
      "header": [
        {
          "config": {
            "class": "header"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "Nested structure\n============\n"
          }
        }
      ],
      "full-column": [
        {
          "config": {
            "class": "column"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "div"
          }
        }
      ]
    },
    "flattened-structure": {
      "config": {
        "layout": [
          "header",
          "full-column"
        ],
        "class": "full-column"
      },
      "header": [
        {
          "config": {
            "class": "header"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "A flattened / normalized / structure\n============\n"
          }
        }
      ],
      "full-column": [
        {
          "config": {
            "class": "column"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "div"
          }
        }
      ]
    },
    "proposed-application": {
      "config": {
        "layout": [
          "full-column",
          "sidepic"
        ],
        "class": "two-column right-image"
      },
      "full-column": [
        {
          "config": {
            "class": "column"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "The Proposed Application DSL\n============\n  * App\n  * View\n    * Focused intent\n  * Group\n    * Unit of concern\n  * Item (Atomic concepts)\n    * Display\n    * Select\n    * Input\n    * Action\n    * Custom Item\n  * Custom Functions\n"
          }
        }
      ],
      "sidepic": [
        {
          "content": {
            "type": "display",
            "value": "div"
          }
        }
      ]
    },
    "cheap-talk": {
      "config": {
        "layout": [
          "header",
          "full-column",
          "footer"
        ],
        "class": "full-column just-info"
      },
      "header": [
        {
          "config": {
            "class": "header"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "Talk is cheap. Let’s see the code\n=================\n"
          }
        }
      ]
    },
    "cheap-code": {
      "config": {
        "layout": [
          "header",
          "full-column",
          "footer"
        ],
        "class": "full-column just-info"
      },
      "header": [
        {
          "config": {
            "class": "header"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "Code is cheap. Let’s see the demo\n=================\n"
          }
        }
      ]
    },
    "current-implementation": {
      "config": {
        "layout": [
          "full-column",
          "sidepic"
        ],
        "class": "two-column right-image"
      },
      "full-column": [
        {
          "config": {
            "class": "column"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "Current Implementation Tech stack\n=================\n  * Livescript\n  * React API\n  * Redux\n"
          }
        }
      ],
      "sidepic": [
        {
          "content": {
            "type": "display",
            "value": "div"
          }
        }
      ]
    },
    "advantages": {
      "config": {
        "layout": [
          "full-column",
          "sidepic"
        ],
        "class": "two-column right-image"
      },
      "full-column": [
        {
          "config": {
            "class": "column"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "Advantages\n=================\n  * App developers deliver direct business value\n  * By focusing on presentation/dumb components and styling\n  * Digestible App definition schema\n  * 10x less boilerplate/setup\n  * App UI schema is dynamic\n"
          }
        }
      ],
      "sidepic": [
        {
          "content": {
            "type": "display",
            "value": "div"
          }
        }
      ]
    },
    "tech-benefits": {
      "config": {
        "layout": [
          "full-column",
          "sidepic"
        ],
        "class": "two-column right-image"
      },
      "full-column": [
        {
          "config": {
            "class": "column"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "Incidental Technical Benefits\n=================\n  * Redux is automated away\n  * Clean and flat state structure\n  * Full flexibility with custom components and custom functions\n  * Apollo experience: change single UI to multiple UI\n"
          }
        }
      ],
      "sidepic": [
        {
          "content": {
            "type": "display",
            "value": "div"
          }
        }
      ]
    },
    "lessons-learned": {
      "config": {
        "layout": [
          "full-column",
          "sidepic"
        ],
        "class": "two-column right-image"
      },
      "full-column": [
        {
          "config": {
            "class": "column"
          }
        },
        {
          "content": {
            "type": "display",
            "content": "Lessons learned\n=================\n  * Vision is vital\n  * Flatten nested structure\n  * Trust the library\n  * Always doubt your own judgement\n  * Be open minded\n  * Avoid data mutability\n  * Breaking backward compatibility is unavoidable\n  * Minimum external dependency\n"
          }
        }
      ],
      "sidepic": [
        {
          "content": {
            "type": "display",
            "value": "div"
          }
        }
      ]
    },
    "slide-questions": {
      "config": {
        "title": null,
        "layout": [
          "main",
          "speakers"
        ]
      },
      "main": [
        {
          "content": {
            "type": "display",
            "content": "Any Questions?\n============\nFeel free to ask...\n"
          }
        }
      ]
    },
    "feedback": {
      "config": {
        "title": null,
        "layout": [
          "main",
          "misc"
        ]
      },
      "main": [
        {
          "audience-feedback-input": {
            "type": "emoji-input"
          }
        },
        {
          "audience-feedback-display": {
            "type": "emoji-display"
          }
        }
      ],
      "misc": [
        {
          "statistics": {
            "type": "display"
          }
        }
      ]
    },
    "qr-code-link": {
      "info": [
        {
          "qr-code": {
            "type": "display/image",
            "value": "https://chart.googleapis.com/chart?cht=qr&chl=www.goo.gl%2Fr45fMP&chs=500x500&choe=UTF-8&chld=L|2",
            "element": {
              "width": 500,
              "height": 500
            }
          }
        },
        {
          "message": {
            "type": "display",
            "content": "www.goo.gl/r45fMP\n"
          }
        }
      ]
    },
    "footer": {
      "config": {
        "class": "custom-footer-view",
        "layout": [
          "default"
        ]
      },
      "default": [
        {
          "response-form": {
            "type": "response-form"
          }
        },
        {
          "slider": {
            "type": "appxigon-slider"
          }
        }
      ]
    }
  }
}